make class BSTreeNode:
    initialize attributes:
    #attributes to create a tree structure
    #left and right will stay None to create a newNode
        key
        value
        left
        right

make class BSTree:
      initialize:
        root

      method set( key ,value):
          if root == None:
            root = BSTreeNode
          else:
            node = self.root
            while node is not None:
              #if similar key found replace
              if node.key is key:
                  node value = value
                  break loop

              elif node left is None and node right is None:
                  if key smaller than node key:
                    node left becomes BSTreeNode(key value)
                  else:
                    node right is BSTreeNode( key value)
              else:
                  if key < node key:
                      node is left of node
                  else:
                      node is right of node

      method get( key , parent):
          if not self.root:
              return None
          node = self.root
          loop till node is not None:
              if node.key == key:
                  return node.value
              elif left == None and right == None:
                  return None
              elif key < node key:
                  node = node.left
              elif key >= node key:
                  node = node.right 

      method list():
      #output defers based on the interpretation
      #here using root to leaves
        walk down the tree to print everything
          till the dead-end.
